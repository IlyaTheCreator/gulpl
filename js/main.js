(()=>{"use strict";var __webpack_modules__={"./app/js/classes/App.js":
/*!*******************************!*\
  !*** ./app/js/classes/App.js ***!
  \*******************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var _LsManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LsManager */ "./app/js/classes/LsManager.js");\n/* harmony import */ var _mocks_cities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mocks/cities */ "./app/js/mocks/cities.js");\n\r\n\r\n\r\n/**\r\n * @namespace entities\r\n */\r\n\r\n/**\r\n * Class representing entire application. Central manager of the app.\r\n * @memberof entities\r\n */\r\nclass App {\r\n  /**\r\n   * Property for holding and managing individual widgets on single city page.\r\n   */\r\n  widgetsData = {\r\n    maxTemp: {\r\n      id: 0,\r\n      name: "max temp",\r\n      value: 67,\r\n      text: "min",\r\n    },\r\n    minTemp: {\r\n      id: 1,\r\n      name: "min temp",\r\n      value: 40,\r\n      text: "max",\r\n    },\r\n    feltTemp: {\r\n      id: 2,\r\n      name: "felt temp",\r\n      value: 50,\r\n    },\r\n    uvIndicator: {\r\n      id: 3,\r\n      name: "uv indicator",\r\n      value: 1,\r\n      additional: "some optional text...",\r\n      text: "low",\r\n    },\r\n    pressure: {\r\n      id: 4,\r\n      name: "pressure",\r\n      value: 1040,\r\n      text: "hPa",\r\n    },\r\n    airQuality: {\r\n      id: 5,\r\n      name: "air quality",\r\n      value: "good air ;)",\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Property for holding and managing city settings on single city page.\r\n   * (notice how keys are matched with the widgetsData object above)\r\n   */\r\n  settingsData = {\r\n    minTemp: {\r\n      text: "Min. Temp.",\r\n      isActive: true,\r\n    },\r\n    maxTemp: {\r\n      text: "Max. Temp.",\r\n      isActive: true,\r\n    },\r\n    uvIndicator: {\r\n      text: "Uv Indicator",\r\n      isActive: true,\r\n    },\r\n    feltTemp: {\r\n      text: "Felt Temp",\r\n      isActive: false,\r\n    },\r\n    pressure: {\r\n      text: "Pressure",\r\n      isActive: false,\r\n    },\r\n    airQuality: {\r\n      text: "Air quality",\r\n      isActive: false,\r\n    },\r\n  };\r\n\r\n  /**\r\n   * @param {Object} dashBoard  DashBoard instance\r\n   * @param {Object} settings Settings instance\r\n   * @param {Object} modalService modalService instance\r\n   * @param {HTMLBodyElement} rootElement DOM element to attach the app to\r\n   */\r\n  constructor(dashBoard, settings, modalService, rootElement) {\r\n    /**\r\n     * @property {Object} dashBoard  DashBoard instance\r\n     */\r\n    this.dashBoard = dashBoard;\r\n    /**\r\n     * @property {Object} settings Settings instance\r\n     */\r\n    this.settings = settings;\r\n    /**\r\n     * @property {Object} settings ModalService instance\r\n     */\r\n     this.modalService = modalService;\r\n    /**\r\n     * @property {HTMLBodyElement} rootElement DOM element to attach the app to\r\n     */\r\n    this.rootElement = rootElement;\r\n    /**\r\n     * @property {Object} lsManager instance of localstorage manager\r\n     */\r\n    this.lsManager = new _LsManager__WEBPACK_IMPORTED_MODULE_0__["default"]();\r\n    /**\r\n     * @property {Object} citiesData weather information\r\n     */\r\n    this.citiesData = [];\r\n    /**\r\n     * "dashboard" || something else\r\n     * @property {string} displayMode defines what "page" to display (kind of SPA)\r\n     */\r\n    this.displayMode = "dashboard";\r\n    /**\r\n     * @property {boolean} showCityInfo defines whether to display single city "page" or not\r\n     */\r\n    this.showCityInfo = true;\r\n    /**\r\n     * @property {string} settingsLcKey localstorage key for keeping settings data\r\n     */\r\n    this.settingsLcKey = "";\r\n    /**\r\n     * @property {string} citiesListLcKey localstorage key for keeping cities\' weather list data\r\n     */\r\n    this.citiesListLcKey = "";\r\n    /**\r\n     * @property {string} cityLcKey localstorage key for keeping individual city\'s data\r\n     */\r\n    this.cityLcKey = "";\r\n\r\n    /**\r\n     * @property {number} touchStartX property for swiping\r\n     */\r\n    this.touchStartX = 0;\r\n    /**\r\n     * @property {number} touchEndX property for swiping\r\n     */\r\n    this.touchEndX = 0;\r\n\r\n    this.setupLocalStorage();\r\n  }\r\n\r\n  /**\r\n   * @property {Function} setupLocalStorage initial localstorage setup\r\n   */\r\n  setupLocalStorage = () => {\r\n    this.settingsLcKey = "weather";\r\n    this.citiesListLcKey = "cities";\r\n    this.cityLcKey = "city";\r\n\r\n    const lcSettings = this.getSettingsState();\r\n    const lcCitiesList = this.getCities();\r\n    const lcCity = this.getCurrentCity();\r\n    \r\n    // Inital launching checks\r\n    if (lcSettings === null) {\r\n      this.lsManager.init(this.settingsLcKey, this.settingsData);\r\n    }\r\n\r\n    if (lcCitiesList === null || !lcCitiesList.length) {\r\n      this.lsManager.init(this.citiesListLcKey, _mocks_cities__WEBPACK_IMPORTED_MODULE_1__["default"]);\r\n    }\r\n\r\n    if (lcCity === null || !Object.keys(lcCity).length) {\r\n      this.lsManager.init(this.cityLcKey, {});\r\n      this.showCityList();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {Function} mountModal function for creating and mounting a modal \r\n   * For props description see Modal\'s constructor\r\n   */\r\n  mountModal = (modalType, modalData, modalContentCreateMethod, classes, id) => {\r\n    this.rootElement.appendChild(\r\n      this.modalService.createModal(modalType, modalData, modalContentCreateMethod, classes, id)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @property {Function} onCityWidgetClick Individual city widget\'s onClick handler\r\n   * @param {Object} city current city where the click occured\r\n   */\r\n  onCityWidgetClick = (city) => {\r\n    this.setCurrentCity(city);\r\n    this.showCityInfo = true;\r\n    this.create();\r\n  }\r\n\r\n  /**\r\n   * @property {Function} onCityWidgetClick Individual setting trigger onClick handler\r\n   * @param {Object} e event object\r\n   */\r\n  toggleWidgetDisplay = (e) => {\r\n    // check if there\'s an id\r\n    if (!e.target.id.trim()) {\r\n      this.create();\r\n    }\r\n\r\n    // check if there\'s a \'-\' sign in the id\r\n    if (!e.target.id.search("-")) {\r\n      this.create();\r\n    }\r\n\r\n    // check if there\'s a class\r\n    if (!e.target.classList[1]) {\r\n      this.create();\r\n    }\r\n\r\n    // check if there\'s a \'-\' sign in the class\r\n    if (!e.target.classList[1].split("-")) {\r\n      this.create();\r\n    }\r\n\r\n    // check if there\'s a division of the class\r\n    if (!e.target.classList[1].split("-")[2]) {\r\n      this.create();\r\n    }\r\n\r\n    const key = e.target.id.split("-")[2];\r\n    const newSettings = this.lsManager.get(this.settingsLcKey);\r\n    const active = e.target.classList[1].split("-")[2];\r\n    const isActive = active === "on";\r\n    newSettings[key].isActive = !isActive;\r\n\r\n    this.lsManager.set(this.settingsLcKey, newSettings);\r\n\r\n    this.createSettings();\r\n  }\r\n\r\n  /**\r\n   * @property {Function} getSettingsState getting current settings state from localstorage\r\n   * @returns {Object}\r\n   */\r\n  getSettingsState = () => {\r\n    return this.lsManager.get(this.settingsLcKey);\r\n  }\r\n\r\n  /**\r\n   * @property {Function} getCities getting current cities list state from localstorage\r\n   * @returns {Object}\r\n   */\r\n  getCities = () => {\r\n    return this.lsManager.get(this.citiesListLcKey);\r\n    // return []\r\n  }\r\n\r\n  /**\r\n   * @property {Function} getCurrentCity Current city localstorage getter\r\n   */\r\n  getCurrentCity = () => {\r\n    return this.lsManager.get(this.cityLcKey);\r\n  }\r\n\r\n  /**\r\n   * @property {Function} setCurrentCity Current city localstorage setter\r\n   * @param {Object} city city to set\r\n   */\r\n  setCurrentCity(city) {\r\n    this.lsManager.set(this.cityLcKey, city);\r\n  }\r\n\r\n  /**\r\n   * @property {Function} setEventListeners setting event listeners when single city "page" is loaded\r\n   */\r\n  setEventListeners() {\r\n    // for smooth transitioning between "pages"\r\n    this.rootElement.addEventListener("webkitAnimationEnd", () => {\r\n      this.rootElement.classList.remove("change-animate");\r\n    }, false)\r\n\r\n    if (!this.showCityInfo) {\r\n      document.getElementById("cityListCloseBtn")?.addEventListener("click", this.closeCityList);\r\n      document.getElementById("addCityBtn")?.addEventListener("click", () => this.dashBoard.generateAddCityModal());\r\n\r\n      return;\r\n    }\r\n\r\n    const cityInfo = document.getElementById("city-info");\r\n\r\n    document.getElementById("showCitiesListBtn")?.addEventListener("click", this.showCityList);\r\n    document.getElementById("settingsOpenBtn")?.addEventListener("click", this.createSettings);\r\n\r\n    cityInfo.addEventListener(\'touchstart\', e => {\r\n      this.touchStartX = e.changedTouches[0].screenX\r\n    });\r\n\r\n    cityInfo.addEventListener(\'touchend\', e => {\r\n      this.touchEndX = e.changedTouches[0].screenX;\r\n      this.handleGesture();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @property {Function} handleGesture swipe realization\r\n   */\r\n  handleGesture() {\r\n    const currentCity = this.getCurrentCity();\r\n    this.citiesData = this.getCities();\r\n\r\n    const currentCityIndex = this.citiesData.findIndex((city) => city.id === currentCity.id);\r\n\r\n    // swiped left | 100 is for correct behavior (don\'t swipe on 1px change, for example)\r\n    if (this.touchEndX + 24 < this.touchStartX) {\r\n      if (currentCityIndex < this.citiesData.length - 1 && currentCityIndex >= 0) {\r\n        this.setCurrentCity(this.citiesData[currentCityIndex + 1]);\r\n\r\n        this.create();\r\n      }\r\n    }\r\n\r\n    // swiped right | 100 is for correct behavior (don\'t swipe on 1px change, for example)\r\n    if (this.touchEndX - 24 > this.touchStartX) {\r\n      if (currentCityIndex > 0) {\r\n        this.setCurrentCity(this.citiesData[currentCityIndex - 1]);\r\n\r\n        this.create();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {Function} clearRootElement emptying roolElement\'s content\r\n   */\r\n  clearRootElement() {\r\n    this.rootElement.innerHTML = "";\r\n  }\r\n\r\n  /**\r\n   * @property {Function} showCityList displaying cities list "page"\r\n   */\r\n  showCityList = () => {\r\n    this.showCityInfo = false;\r\n    this.create();\r\n  }\r\n\r\n  /**\r\n   * @property {Function} smoothTransition\r\n   */\r\n  smoothTransition = () => {\r\n    this.rootElement.classList.add("change-animate");\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createNavigation creating navigation element\r\n   */\r\n  createNavigation() {\r\n    const navigation = document.createElement("nav");\r\n    navigation.classList.add("navigation");\r\n\r\n    navigation.innerHTML = `\r\n      <div class="navigation__settings" id="settingsOpenBtn">\r\n          <i class="icon icon-figma-settings"></i>\r\n      </div>\r\n      <div class="navigation__pages" id="nav-circles"></div>\r\n      <div class="navigation__cities">\r\n          <a class="link" id="showCitiesListBtn">\r\n              <div class="navigation__cities-link-wrapper">\r\n                  <i class="icon icon-figma-tiles navigation__smaller-icon"></i>\r\n              </div>\r\n          </a>\r\n      </div>\r\n    `;\r\n\r\n    this.rootElement.appendChild(navigation);\r\n    this.createNavCircles();\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createNavCircles\r\n   */\r\n  createNavCircles() {\r\n    const circlesWrapper = document.getElementById("nav-circles");\r\n\r\n    this.getCities().forEach((city) => {\r\n      const circle = document.createElement("i");\r\n\r\n      circle.classList.add("icon");\r\n      circle.classList.add("icon-dot");\r\n      circle.classList.add("navigation__circle");\r\n\r\n      if (city.id === this.getCurrentCity().id) {\r\n        circle.classList.add("navigation__circle--active")\r\n      }\r\n\r\n      circle.addEventListener("click", () => {\r\n        // check to avoid unnecessary re-rendering\r\n        if (city.id !== this.getCurrentCity().id) {\r\n          this.setCurrentCity(city);\r\n          this.create();\r\n        }\r\n      });\r\n\r\n      circlesWrapper.appendChild(circle);\r\n    })\r\n    \r\n    return circlesWrapper;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createSettings creating settings element\r\n   */\r\n  createSettings = () => {\r\n    this.mountModal(\r\n      "settings",\r\n      () => [\r\n        this.settings.createCloseSettingsBtn(this.closeSettings),\r\n        this.settings.createContentWrapper(this.closeSettings),\r\n        this.settings.createSettings(this.getSettingsState(), this.setOnSettingClick)\r\n      ],\r\n      [],\r\n      "settings"\r\n    );\r\n    \r\n    document.getElementById("settingsCloseBtn")?.addEventListener("click", () => {\r\n      console.log("chel")\r\n      this.closeSettings()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @property {Function} closeSettings Closing settings modal\r\n   */\r\n  closeSettings = () => {\r\n    this.create();\r\n  }\r\n\r\n  closeCityAddModal = () => {\r\n    this.create();\r\n    this.showCityInfo = false;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} setOnSettingClick Setting onClick event later on a single setting item\r\n   */\r\n  setOnSettingClick = (settingNode) => {\r\n    settingNode.childNodes[3].childNodes[1].addEventListener("click",this.toggleWidgetDisplay);\r\n  }\r\n\r\n  /**\r\n   * @property {Function} closeCityList\r\n   */\r\n  closeCityList = () => {\r\n    this.showCityInfo = true;\r\n    this.create();\r\n  }\r\n\r\n  /**\r\n   * @property {Function} create central app\'s point\r\n   */\r\n  create = () => {\r\n    this.clearRootElement();\r\n\r\n    if (this.showCityInfo) {\r\n      this.createNavigation();\r\n    }\r\n\r\n    // central "router"\r\n    switch (this.displayMode) {\r\n      case "dashboard":\r\n        this.dashBoard.create(\r\n          this.getCities(),\r\n          this.getCurrentCity(),\r\n          this.onCityWidgetClick,\r\n          this.getSettingsState,\r\n          this.widgetsData,\r\n          this.showCityInfo,\r\n          this.mountModal,\r\n          this.closeCityAddModal,\r\n          this.smoothTransition\r\n        ).forEach((element) => this.rootElement.appendChild(element));\r\n\r\n        this.setEventListeners();\r\n\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (this.showCityInfo) {\r\n      document.getElementById("city-list")?.remove();\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://gulpl/./app/js/classes/App.js?')},"./app/js/classes/DashBoard.js":
/*!*************************************!*\
  !*** ./app/js/classes/DashBoard.js ***!
  \*************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ DashBoard)\n/* harmony export */ });\n/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Widget */ "./app/js/classes/Widget.js");\n\r\n\r\n/**\r\n * @namespace entities\r\n */\r\n\r\n/**\r\n * DashBoard class - manager for cities list and single city\r\n * @memberof entities\r\n */\r\nclass DashBoard {\r\n  /**\r\n   * @property {Function} createContentWrapper creating markup/styles wrapper for displayed city\r\n   * @param {*} city current city to be displayed\r\n   * @returns {Object}\r\n   */\r\n  createContentWrapper(city) {\r\n    const contentWrapper = document.createElement("div");\r\n    const i = 2;\r\n\r\n    contentWrapper.innerHTML = `\r\n      <h1 class="screen__header">${city.title}</h1>\r\n      <p class="screen__date">${new Date(city.date).toDateString()}</p>\r\n      <div class="screen__weather">\r\n          <img src="${city.cityImage\r\n      }" alt="weather image" class="screen__image">\r\n          <p class="screen__temperature">${city.currentTemp}°</p>\r\n          <p class="screen__weather-type">${city.weatherCondition}</p>\r\n      </div>\r\n    `;\r\n\r\n    return contentWrapper;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createCloseCityBtn creating btn for closing current city\r\n   * @returns {Object}\r\n   */\r\n  createCloseCityListBtn() {\r\n    const btn = document.createElement("button");\r\n\r\n    btn.classList.add("close-modal-btn");\r\n    btn.classList.add("close-city-list-btn");\r\n    btn.id = "cityListCloseBtn";\r\n\r\n    btn.innerHTML = `\r\n      <i class="icon-cancel-squared"></i>\r\n    `;\r\n\r\n    return btn;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createCityInfoGrid creating wrapper for city\'s widgets\r\n   * @returns {Object}\r\n   */\r\n  createCityInfoGrid() {\r\n    const cityInfoGrid = document.createElement("div");\r\n\r\n    cityInfoGrid.classList.add("city-info-grid");\r\n\r\n    return cityInfoGrid;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createCityWidgetContent creating innerHTMl of a city widget\r\n   * @returns {string}\r\n   */\r\n  createCityWidgetContent(cityData, key) {\r\n    return `\r\n      <p class="city-info-grid__widget-description">${cityData[key].name\r\n      }</p>\r\n      <div class="city-info-grid__content-wrapper city-info-grid__content-wrapper--margin-bottom">\r\n          <p class="city-info-grid__widget-number">${cityData[key].value\r\n      }</p>\r\n          ${cityData[key].text\r\n        ? `<p class="city-info-grid__widget-data">${cityData[key].text}</p>`\r\n        : ""\r\n      }\r\n          ${cityData[key].additional\r\n        ? `<p class="city-info-grid__widget-additional">${cityData[key].additional}</p>`\r\n        : ""\r\n      }\r\n      </div>\r\n     `;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createCity creating current city page\r\n   * @param {Object} citiesData current cities data\r\n   * @param {Object} currentCity current city data\r\n   * @returns {Object}\r\n   */\r\n  createCity(citiesData, currentCity) {\r\n    const contentWrapper = this.createContentWrapper(currentCity);\r\n    const cityInfoGrid = this.createCityInfoGrid();\r\n    \r\n    Object.keys(citiesData).forEach((key) => {\r\n      const content = this.createCityWidgetContent(currentCity, key);\r\n      const widget = _Widget__WEBPACK_IMPORTED_MODULE_0__["default"].create(content, "city", undefined, ["city-info-grid__grid-item"])\r\n    \r\n      cityInfoGrid.appendChild(widget);\r\n    });\r\n\r\n    contentWrapper.id = "city-info";\r\n    contentWrapper.classList.add("city-info");\r\n    contentWrapper.appendChild(cityInfoGrid);\r\n\r\n    return contentWrapper;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createContent creating initial content innerHTML for city page\r\n   * @param {Object} city current city\r\n   * @returns {string}\r\n   */\r\n  createContent(city) {\r\n    return `\r\n      <a class="link" href="#">\r\n        <h3 class="screen__title">\r\n          <div className="screen__city-title-group">\r\n            <span class="screen__city-name">${city.title}</span>\r\n            <p class="screen__city-time">${new Date(city.date).toDateString()}</p>\r\n          </div>\r\n          <span class="screen__city-temperature">${city.currentTemp}°</span>\r\n        </h3>\r\n        <div class="screen__city-info">\r\n          <span class="screen__city-weather-condition">${city.weatherCondition}</span>\r\n          <span class="screen__city-temperature-range">Max. ${city.maxTemp.value} Min. ${city.minTemp.value}</span>\r\n        </div>\r\n      </a>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createCityList creating city list page\r\n   * @param {Object} cities current cities data\r\n   * @param {Function} onCityWidgetClick Individual city widget\'s onClick handler\r\n   * @returns {Array<Object>}\r\n   */\r\n  createCityList(cities, onCityWidgetClick) {\r\n    const content = cities.map((city) => {\r\n      const onClick = () => {\r\n        onCityWidgetClick(city);\r\n      };\r\n\r\n      const cityWidget = _Widget__WEBPACK_IMPORTED_MODULE_0__["default"].create(\r\n        this.createContent(city),\r\n        "list",\r\n        onClick,\r\n        ["screen__city"]\r\n      );\r\n\r\n      return cityWidget;\r\n    });\r\n\r\n    content.push(this.createAddBtn());\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createAddBtn creates button to add a city\r\n   * @returns {Object}\r\n   */\r\n  createAddBtn() {\r\n    const btn = document.createElement("button");\r\n\r\n    btn.classList.add("btn");\r\n    btn.classList.add("widget");\r\n    btn.classList.add("screen__add-btn");\r\n    btn.id = "addCityBtn";\r\n\r\n    btn.innerHTML = `\r\n      <i class="icon-figma-plus"></i>\r\n    `;\r\n\r\n    return btn;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createAddCityContentWrapper creating add-city overlay\r\n   * @returns {Object}\r\n   */\r\n   createAddCityContentWrapper(onClick) {\r\n    const contentWrapper = document.createElement("div");\r\n\r\n    contentWrapper.id = "add-city-overlay";\r\n    contentWrapper.classList.add("modal-overlay");\r\n    contentWrapper.classList.add("modal-overlay--add-city");\r\n\r\n    contentWrapper.addEventListener("click", onClick);\r\n\r\n    return contentWrapper;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createCloseAddCityBtn creating btn for closing add-city modal\r\n   * @returns {Object}\r\n   */\r\n   createCloseAddCityBtn() {\r\n    const btn = document.createElement("button");\r\n\r\n    btn.classList.add("close-modal-btn");\r\n    btn.classList.add("close-add-city-btn");\r\n    btn.id = "closeCityBtn";\r\n\r\n    btn.innerHTML = `\r\n      <i class="icon-cancel-squared"></i>\r\n    `;\r\n\r\n    btn.addEventListener("click", this.closeCityAddModal);\r\n\r\n    return btn;\r\n  }\r\n\r\n  createAddCityForm() {\r\n    const form = document.createElement("form");\r\n\r\n    form.classList.add("add-city-form");\r\n\r\n    form.innerHTML = `\r\n      <div class="input-wrapper">\r\n        <input type="text" placeholder="Enter City Name..." />\r\n        <div class="icon-wrapper">\r\n          <i class="icon-map"></i>\r\n        </div>\r\n      </div>\r\n      <button class="btn">Add</button>\r\n    `;\r\n\r\n    return form;\r\n  }\r\n\r\n  createAddCityContent() {\r\n    const addCityCard = document.createElement("div");\r\n    \r\n    addCityCard.classList.add("card");\r\n    addCityCard.classList.add("add-city");\r\n\r\n    addCityCard.appendChild(this.createAddCityForm());\r\n\r\n    return addCityCard;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createEmptyListMessage creating message of empty city list\r\n   * @returns {Object}\r\n   */\r\n  createEmptyListMessage() {\r\n    const container = document.createElement("div");\r\n\r\n    container.classList.add("empty-city-list-container");\r\n\r\n    container.innerHTML = `\r\n      <p class="empty-city-list-container__text">\r\n        It seems like you don\'t have any cities selected.\r\n        Let\'s add one!\r\n      </p>\r\n    `;\r\n\r\n    return container;\r\n  }\r\n\r\n  generateAddCityModal() {\r\n    if (!document.getElementById("add-city")) {\r\n      this.mountModal(\r\n        "add-city",\r\n        () => [\r\n          this.createCloseAddCityBtn(),\r\n          this.createAddCityContentWrapper(this.closeCityAddModal),\r\n          this.createAddCityContent()\r\n        ],\r\n        ["add-city-modal"],\r\n        "add-city"\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {Function} generateCityList preparing city list to be attached to the dom\r\n   * @returns {Object}\r\n   */\r\n  generateCityList() {\r\n    if (this.cities.length === 0) {\r\n      return [this.createEmptyListMessage(), this.createAddBtn()];\r\n    }\r\n\r\n    const list = this.createCityList(this.cities, this.onCityWidgetClick);\r\n    const listWrapper = document.createElement("div");\r\n\r\n    listWrapper.classList.add("city-list");\r\n\r\n    list.forEach((item) => listWrapper.appendChild(item));\r\n\r\n    this.mountModal(\r\n      "city-list",\r\n      () => list,\r\n      ["city-list"], \r\n      "city-list"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @property {Function} generateCityInfo preparing single city page to be attached to the dom\r\n   * @returns {Object}\r\n   */\r\n  generateCityInfo() {\r\n    const currentSettingsState = this.getSettingsState();\r\n\r\n    const filteredCityWidgets = {};\r\n\r\n    Object.keys(currentSettingsState)\r\n      .filter((key) => {\r\n        return currentSettingsState[key].isActive;\r\n      })\r\n      .forEach((key) => {\r\n        filteredCityWidgets[key] = this.widgetsData[key];\r\n      });\r\n\r\n    return this.createCity(filteredCityWidgets, this.currentCity);\r\n  }\r\n\r\n  /**\r\n   * @property {Function} generateDashBoard preparing entire dashboard to be attached to the dom\r\n   * @returns {Array<Object>}\r\n   */\r\n  generateDashBoard() {\r\n    let output = [];\r\n\r\n    if (this.showCityInfo) {\r\n      output.push(this.generateCityInfo());\r\n    } else {\r\n      if (this.cities.length > 0 && this.currentCity.title) {\r\n        output.push(this.createCloseCityListBtn());\r\n      }\r\n      \r\n      if (Array.isArray(this.generateCityList())) {\r\n        output = [...output, ...this.generateCityList()];\r\n      }\r\n    }\r\n\r\n    this.smoothTransition();\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} create getting the required methods from the app and connecting to it\r\n   * @param {Object} cities \r\n   * @param {Object} currentCity \r\n   * @param {Function} onCityWidgetClick \r\n   * @param {Function} getSettingsState \r\n   * @param {Function} widgetsData \r\n   * @param {Function} showCityInfo \r\n   * @param {Function} mountModal \r\n   * @param {Function} closeCityAddModal \r\n   * @param {Function} smoothTransition \r\n   * @returns {Array<Object>}\r\n   */\r\n  create(\r\n    cities,\r\n    currentCity,\r\n    onCityWidgetClick,\r\n    getSettingsState,\r\n    widgetsData,\r\n    showCityInfo,\r\n    mountModal,\r\n    closeCityAddModal,\r\n    smoothTransition\r\n  ) {\r\n    /**\r\n     * @property {Array} cities latest city data\r\n     */\r\n     this.cities = cities;\r\n    /**\r\n     * @property {Function} currentCity \r\n     */\r\n    this.currentCity = currentCity;\r\n    /**\r\n     * @property {Function} onCityWidgetClick check App class for more information\r\n     */\r\n    this.onCityWidgetClick = onCityWidgetClick;\r\n    /**\r\n     * @property {Function} getSettingsState\r\n     */\r\n    this.getSettingsState = getSettingsState;\r\n    /**\r\n     * @property {Function} widgetsData\r\n     */\r\n    this.widgetsData = widgetsData;\r\n    /**\r\n     * @property {Function} showCityInfo\r\n     */\r\n    this.showCityInfo = showCityInfo;\r\n    /**\r\n     * @property {Function} mountModal\r\n     */\r\n    this.mountModal = mountModal;\r\n    /**\r\n     * @property {Function} closeCityAddModal\r\n     */\r\n    this.closeCityAddModal = closeCityAddModal;\r\n    /**\r\n     * @property {Function} smoothTransition\r\n     */\r\n    this.smoothTransition = smoothTransition;\r\n\r\n    return this.generateDashBoard();\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://gulpl/./app/js/classes/DashBoard.js?')},"./app/js/classes/LsManager.js":
/*!*************************************!*\
  !*** ./app/js/classes/LsManager.js ***!
  \*************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ LsManager)\n/* harmony export */ });\n/**\r\n * @namespace entities\r\n */\r\n\r\n/**\r\n * Class for managing localstorage data for the app\r\n * @memberof entities\r\n */\r\nclass LsManager {\r\n  constructor() {\r\n    /**\r\n     * @property {string} appKey current app key in localstorage\r\n     */\r\n    this.appKey = "";\r\n  }\r\n\r\n  /**\r\n   * @property {Function} init initializing localstorage data\r\n   * @param {string} appKey appKey\r\n   * @param {Object} data data to be put in the localstorage\r\n   */\r\n  init(appKey, data = {}) {\r\n    this.set(appKey, data);\r\n    this.appKey = appKey;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} get localstorage getter\r\n   * @param {string} key localstorage key\r\n   * @returns {Object}\r\n   */\r\n  get(key) {\r\n    return JSON.parse(localStorage.getItem(key));\r\n  }\r\n\r\n  /**\r\n   * @property {Function} set localstorage setter\r\n   * @param {string} key localstorage key\r\n   * @param {Object} key localstorage value\r\n   * @returns {Object}\r\n   */\r\n  set(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n\r\n  /**\r\n   * @property {Function} delete removing localstorage item\r\n   * @param {string} key localstorage key\r\n   */\r\n  delete(key) {\r\n    localStorage.removeItem(key);\r\n  }\r\n\r\n  /**\r\n   * @property {Function} clear clearing out localstorage item\r\n   */\r\n  clear() {\r\n    this.set(this.appKey, "");\r\n  }\r\n\r\n  /**\r\n   * @property {Function} list gets all localstorage data\r\n   * @returns {Object}\r\n   */\r\n  static list() {\r\n    const output = {};\r\n\r\n    for (let [key, value] of Object.entries(localStorage)) {\r\n      output[key] = value;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} reset wiping out localstorage data completely\r\n   */\r\n  static reset() {\r\n    localStorage.clear();\r\n  }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://gulpl/./app/js/classes/LsManager.js?')},"./app/js/classes/Modal.js":
/*!*********************************!*\
  !*** ./app/js/classes/Modal.js ***!
  \*********************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Modal)\n/* harmony export */ });\n/**\r\n * @namespace entities \r\n */\r\n\r\n/**\r\n * A class for managing modals \r\n * @memberof entities\r\n */\r\nclass Modal {\r\n    constructor(modalType, modalContentCreateMethod, classes, id) {\r\n        /**\r\n         * @property {String} modalType type of a modal (must match those in ModalService)   \r\n         */\r\n        this.modalType = modalType;\r\n        /**\r\n         * @property {Function} modalContentCreateMethod function for creating modal\'s content\r\n         * @returns {Array<Object>}\r\n         * It returns an array for convinience\r\n         */\r\n        this.modalContentCreateMethod = modalContentCreateMethod;\r\n        /**\r\n         * @property {Array<String>} classes additional classes for the modal\r\n         */\r\n        this.classes = classes;\r\n        /**\r\n         * @property {String} id id for modal\r\n         */\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * @property {Function} create creating a modal\r\n     * @returns {Object}\r\n     */\r\n    create() {\r\n        const modal = document.createElement("div");\r\n\r\n        modal.classList.add("modal");\r\n        this.classes.forEach((className) => modal.classList.add(className));\r\n        modal.id = this.id;\r\n        this.modalContentCreateMethod().forEach((child) => modal.appendChild(child));\r\n\r\n        return modal;\r\n    }\r\n};\n\n//# sourceURL=webpack://gulpl/./app/js/classes/Modal.js?')},"./app/js/classes/Settings.js":
/*!************************************!*\
  !*** ./app/js/classes/Settings.js ***!
  \************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Settings)\n/* harmony export */ });\n/**\r\n * @namespace entities\r\n */\r\n\r\n/**\r\n * Class for managing current city display settings\r\n * @memberof entities\r\n */\r\nclass Settings {\r\n  /**\r\n   * @property {Function} createContentWrapper creating settings dom wrapper\r\n   * @returns {Object}\r\n   */\r\n  createContentWrapper(onClick) {\r\n    const contentWrapper = document.createElement("div");\r\n\r\n    contentWrapper.id = "settings-overlay";\r\n    contentWrapper.classList.add("modal-overlay");\r\n    contentWrapper.classList.add("modal-overlay--settings");\r\n\r\n    contentWrapper.addEventListener("click", onClick);\r\n\r\n    return contentWrapper;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createSettingItem creating a single setting toggler\r\n   * @param {Object} setting current setting object (see App\'s settingsData prop) \r\n   * @param {string} key current setting key (see App\'s settingsData prop) \r\n   * @returns {Object}\r\n   */\r\n  createSettingItem(setting, key, setOnSettingClick) {\r\n    const toggleValue = setting.isActive ? "on" : "off";\r\n    const settingItem = document.createElement("div");\r\n\r\n    settingItem.classList.add("settings__item");\r\n\r\n    settingItem.innerHTML = `\r\n      <p class="settings__item-text">${setting.text}</p>\r\n      <div \r\n          class="settings__toggle-icon settings__toggle-icon--${toggleValue}"\r\n      >\r\n        <i \r\n          id="setting-toggle-${key}"\r\n          class="icon icon-toggle-${toggleValue}"\r\n        ></i>\r\n      </div>\r\n    `;\r\n\r\n    setOnSettingClick(settingItem);\r\n\r\n    return settingItem;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createCloseSettingsBtn creating btn for closing setting modal\r\n   * @returns {Object}\r\n   */\r\n   createCloseSettingsBtn(onClick) {\r\n    const btn = document.createElement("button");\r\n\r\n    btn.classList.add("close-modal-btn");\r\n    btn.classList.add("close-settings-modal-btn");\r\n    btn.id = "settingsCloseBtn";\r\n\r\n    btn.innerHTML = `\r\n      <i class="icon-cancel-squared"></i>\r\n    `;\r\n\r\n    btn.addEventListener("click", onClick);\r\n\r\n    return btn;\r\n  }\r\n\r\n  /**\r\n   * @property {Function} createSettings creating settings\r\n   * @param {Object} lcData settings data from localstorage\r\n   * @returns {Object}\r\n   */\r\n  createSettings(lcData, setOnSettingClick) {\r\n    const settingsCard = document.createElement("div");\r\n    \r\n    settingsCard.classList.add("card");\r\n    settingsCard.classList.add("settings");\r\n\r\n    Object.keys(lcData).forEach((key) => {\r\n      const setting = lcData[key];\r\n\r\n      settingsCard.appendChild(this.createSettingItem(setting, key, setOnSettingClick));\r\n    });\r\n\r\n    return settingsCard;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://gulpl/./app/js/classes/Settings.js?')},"./app/js/classes/Widget.js":
/*!**********************************!*\
  !*** ./app/js/classes/Widget.js ***!
  \**********************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Widget)\n/* harmony export */ });\n/**\r\n * @namespace entities\r\n */\r\n\r\n/**\r\n * Class for managing creating widgets - ui components\r\n * @memberof entities\r\n */\r\nclass Widget {\r\n  /**\r\n   * @property {Function} create creating a widget\r\n   * @param {Object} content \r\n   * @param {string} type \r\n   * @param {Function} onClick \r\n   * @param {Array} classes \r\n   * @returns {HTMLBodyElement}\r\n   */\r\n  static create(content, type, onClick, classes = []) {\r\n    const widget = document.createElement("div");\r\n\r\n    if (type === "list") {\r\n      classes.push("widget");\r\n    }\r\n\r\n    if (type === "city") {\r\n      classes.push("widget");\r\n      classes.push("widget-rounded");\r\n    }\r\n\r\n    classes.forEach((className) => widget.classList.add(className));\r\n    widget.innerHTML = content;\r\n    widget.addEventListener("click", onClick);\r\n\r\n    return widget;\r\n  }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://gulpl/./app/js/classes/Widget.js?')},"./app/js/index.js":
/*!*************************!*\
  !*** ./app/js/index.js ***!
  \*************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_AppModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/AppModule */ "./app/js/modules/AppModule.js");\n\r\n\r\ndocument.addEventListener("DOMContentLoaded", _modules_AppModule__WEBPACK_IMPORTED_MODULE_0__["default"].init());\n\n//# sourceURL=webpack://gulpl/./app/js/index.js?')},"./app/js/mocks/cities.js":
/*!********************************!*\
  !*** ./app/js/mocks/cities.js ***!
  \********************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\n  {\n    id: 1,\n    title: "Ivanovo",\n    date: new Date(),\n    cityImage: "assets/images/cloudy.png",\n    currentTemp: 32,\n    weatherCondition: "cloudy",\n    maxTemp: {\n      name: "MAX TEMP",\n      value: "98°",\n    },\n    minTemp: {\n      name: "MIN TEMP",\n      value: "21°",\n    },\n    feltTemp: {\n      name: "FEELS LIKE",\n      value: "14°",\n    },\n    uvIndicator: {\n      value: 1,\n      name: "Uv Indicator",\n      additional: "some description lalala.",\n      text: "Medium",\n    },\n    pressure: {\n      name: "PRESSURE",\n      value: "213 hPa",\n    },\n    airQuality: {\n      name: "Air quality",\n      value: "Air quality text new",\n    },\n  },\n  {\n    id: 2,\n    title: "Pesoso",\n    date: new Date(),\n    cityImage: "assets/images/cloudy.png",\n    currentTemp: 49,\n    weatherCondition: "cloudy, yeah",\n    maxTemp: {\n      name: "MAX TEMP",\n      value: "999°",\n    },\n    minTemp: {\n      name: "MIN TEMP",\n      value: "44°",\n    },\n    feltTemp: {\n      name: "FEELS LIKE",\n      value: "49°",\n    },\n    uvIndicator: {\n      value: 1,\n      name: "Uv Indicator",\n      additional: "some cool level during all the day.",\n      text: "Low",\n    },\n    pressure: {\n      name: "PRESSURE",\n      value: "1044 hPa",\n    },\n    airQuality: {\n      name: "Air quality",\n      value: "hello hello hello",\n    },\n  },\n  {\n    id: 3,\n    title: "Escondido",\n    date: new Date(),\n    cityImage: "assets/images/cloudy.png",\n    currentTemp: 49,\n    weatherCondition: "cloudy",\n    maxTemp: {\n      name: "MAX TEMP",\n      value: "67°",\n    },\n    minTemp: {\n      name: "MIN TEMP",\n      value: "40°",\n    },\n    feltTemp: {\n      name: "FEELS LIKE",\n      value: "14°",\n    },\n    uvIndicator: {\n      value: 1,\n      name: "Uv Indicator",\n      additional: "Low level during all the day.",\n      text: "Low",\n    },\n    pressure: {\n      name: "PRESSURE",\n      value: "1040 hPa",\n    },\n    airQuality: {\n      name: "Air quality",\n      value: "Air quality text",\n    },\n  },\n  {\n    id: 4,\n    title: "Zaporozhie",\n    date: new Date(),\n    cityImage: "assets/images/cloudy.png",\n    currentTemp: 21,\n    weatherCondition: "cloudy",\n    maxTemp: {\n      name: "MAX TEMP",\n      value: "12°",\n    },\n    minTemp: {\n      name: "MIN TEMP",\n      value: "77°",\n    },\n    feltTemp: {\n      name: "FEELS LIKE",\n      value: "34°",\n    },\n    uvIndicator: {\n      value: 1,\n      name: "Uv Indicator",\n      additional: "High level be careful.",\n      text: "Hight",\n    },\n    pressure: {\n      name: "PRESSURE",\n      value: "666 hPa",\n    },\n    airQuality: {\n      name: "Air quality",\n      value: "Shitty air",\n    },\n  },\n]);\n\n\n//# sourceURL=webpack://gulpl/./app/js/mocks/cities.js?')},"./app/js/modules/AppModule.js":
/*!*************************************!*\
  !*** ./app/js/modules/AppModule.js ***!
  \*************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _wrapperClassScript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../wrapperClassScript */ "./app/js/wrapperClassScript.js");\n/* harmony import */ var _classes_Settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/Settings */ "./app/js/classes/Settings.js");\n/* harmony import */ var _classes_DashBoard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/DashBoard */ "./app/js/classes/DashBoard.js");\n/* harmony import */ var _services_ModalService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/ModalService */ "./app/js/services/ModalService.js");\n/* harmony import */ var _classes_App__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../classes/App */ "./app/js/classes/App.js");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @namespace modules\r\n */\r\n\r\n/**\r\n * App module\r\n * @memberof entities\r\n */\r\nconst AppModule = (function() {\r\n  return {\r\n    init() {\r\n      new _classes_App__WEBPACK_IMPORTED_MODULE_4__["default"](\r\n        new _classes_DashBoard__WEBPACK_IMPORTED_MODULE_2__["default"](),\r\n        new _classes_Settings__WEBPACK_IMPORTED_MODULE_1__["default"](),\r\n        new _services_ModalService__WEBPACK_IMPORTED_MODULE_3__["default"](),\r\n        document.getElementById("app")\r\n      ).create();\r\n\r\n      (0,_wrapperClassScript__WEBPACK_IMPORTED_MODULE_0__["default"])();\r\n    },\r\n  };\r\n})();\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AppModule);\r\n\n\n//# sourceURL=webpack://gulpl/./app/js/modules/AppModule.js?')},"./app/js/services/ModalService.js":
/*!*****************************************!*\
  !*** ./app/js/services/ModalService.js ***!
  \*****************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ ModalService)\n/* harmony export */ });\n/* harmony import */ var _classes_Modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Modal */ "./app/js/classes/Modal.js");\n/**\r\n * @namespace services \r\n */\r\n\r\n\r\n\r\n/**\r\n * A class for managing modal windows \r\n * @memberof services\r\n */\r\nclass ModalService {\r\n    constructor() {\r\n        /**\r\n         * @property {Array<String>} availableModalTypes these types match element\'s ids in the dom\r\n         */\r\n        this.availableModalTypes = ["city-list", "settings", "add-city"];\r\n        /**\r\n         * @property {Array<Object>} registeredModals registered modals\r\n         */\r\n        this.registeredModals = [];\r\n    }\r\n\r\n    /**\r\n     * You can find arguments\' description in Modal class properties\r\n     * @property {Function} createModal \r\n     * @returns {Object}\r\n     */\r\n    createModal(modalType, modalContentCreateMethod, classes, id) {\r\n        const availableModal = this.checkAvailableModal(modalType);\r\n\r\n        if (!availableModal) {\r\n            console.warn(`There is no available modal of type ${modalType}`);\r\n            return document.createElement("div");\r\n        } \r\n\r\n        let registeredModal = this.checkRegisteredModal(modalType);\r\n\r\n        if (!registeredModal) {\r\n            this.registeredModals.push(\r\n                new _classes_Modal__WEBPACK_IMPORTED_MODULE_0__["default"](modalType, modalContentCreateMethod, classes, id)\r\n            );\r\n\r\n            registeredModal = this.registeredModals[this.registeredModals.length - 1];\r\n        }\r\n\r\n        return registeredModal.create();\r\n    }\r\n\r\n    /**\r\n     * @property {Function} checkAvailableModal\r\n     */\r\n    checkAvailableModal(modalType) {\r\n        return this.availableModalTypes.find((type) => type === modalType);\r\n    }\r\n\r\n    /**\r\n     * @property {Function} checkRegisteredModal\r\n     */\r\n    checkRegisteredModal(modalType) {\r\n        return this.registeredModals.find((modal) => modal.modalType === modalType);\r\n    }\r\n};\n\n//# sourceURL=webpack://gulpl/./app/js/services/ModalService.js?')},"./app/js/wrapperClassScript.js":
/*!**************************************!*\
  !*** ./app/js/wrapperClassScript.js ***!
  \**************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\r\n  Array which allows us to loop through device types\r\n\r\n  overall structure: [ [], [], [] ] - array of arrays. Each inner array is a group of related operating systems (e.g. mac and ios)\r\n  structure of inner array: [ {}, {} ] - one or two objects. Each object represents a particular OS\r\n  structure of the OS object: { systemName, devices } - devices - list of device types available in that OS\r\n  structure of devices: [ {}, {} ] - each object is a separate device \r\n  structure of the device: { name, types } - types - array of strings which will help us to search through userAgent string \r\n*/\r\nconst devices = [\r\n  [\r\n    {\r\n      systemName: "android",\r\n      devices: [\r\n        {\r\n          name: "device",\r\n          types: [],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      systemName: "windows",\r\n      devices: [\r\n        {\r\n          name: "mobile",\r\n          types: ["Mobile"],\r\n        },\r\n        {\r\n          name: "desktop",\r\n          types: ["win64", "wow64;", "wow64", "win64;"],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      systemName: "ios",\r\n      devices: [\r\n        {\r\n          name: "device",\r\n          types: ["iphone;", "iphone"],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      systemName: "mac",\r\n      devices: [\r\n        {\r\n          name: "desktop",\r\n          types: ["macintosh", "macintosh;"],\r\n        },\r\n        {\r\n          name: "tablet",\r\n          types: ["ipad", "ipad;"],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      systemName: "linux",\r\n      devices: [\r\n        {\r\n          name: "device",\r\n          types: [],\r\n        },\r\n      ]\r\n    }\r\n  ]\r\n];\r\n\r\n// Array which allows us to loop through different device sizes\r\nconst deviceDimensions = [\r\n  {\r\n    name: "phone-wide",\r\n    maxWidth: 599,\r\n  },\r\n  {\r\n    name: "tablet-portrait-wide",\r\n    maxWidth: 600,\r\n  },\r\n  {\r\n    name: "tablet-landscape-wide",\r\n    maxWidth: 900,\r\n  },\r\n  {\r\n    name: "desktop-wide",\r\n    maxWidth: 1200,\r\n  },\r\n  {\r\n    name: "big-desktop-wide",\r\n    maxWidth: 1920,\r\n  },\r\n  {\r\n    name: "large-desktop-wide",\r\n    maxWidth: 2600,\r\n  },\r\n];\r\n\r\n/* \r\n  Function which in the end assigns a class to outer wrapper of the application which tells \r\n  what device a user is in.\r\n*/\r\nconst detectDevice = () => {\r\n    const ua = navigator.userAgent.toLocaleLowerCase();\r\n    let typeClassName;\r\n  \r\n    devices.forEach(systemGroup => {\r\n      systemGroup.forEach(system => {\r\n        system.devices.forEach(device => {\r\n            let searchResult;\r\n            \r\n            // If there are no types for this particular device, do the search with systemName (windows, linux, android, etc)\r\n            if (device.types.length === 0) {\r\n              searchResult = ua.search(system.systemName);\r\n            } \r\n          \r\n            // Otherwise, search for each individual type is executed\r\n            device.types.forEach(type => {\r\n              searchResult = ua.search(type);\r\n            })\r\n          \r\n            // If there\'s a match in the search, assign this value to the class variable\r\n            if (searchResult !== -1) {\r\n              typeClassName = `screen-wrapper--${system.systemName}--${device.name}`;\r\n            }\r\n          \r\n            /* \r\n              Expections.\r\n              If you are on android, your userAgent will have both linux and android strings matches.\r\n              Here typeClassName is explicitly set to the value of android\r\n            */\r\n            if (ua.search("linux") !== -1 && ua.search("android") ) {\r\n              typeClassName = "screen-wrapper--android--device";\r\n            }\r\n        })\r\n      });\r\n    });\r\n  \r\n    document.querySelector(".screen-wrapper").classList.add(typeClassName);\r\n};\r\n\r\nconst detectDeviceWidth = () => {\r\n  for (const dimension of deviceDimensions) {\r\n    // if there\'s a match, assign the class and exit from the loop\r\n    if (screen.width <= dimension.maxWidth) {\r\n      document.querySelector(".screen-wrapper").classList.add(dimension.name);\r\n      break;\r\n    } \r\n  }\r\n}\r\n\r\nconst addWrapperClass = () => {\r\n  detectDevice();\r\n  detectDeviceWidth();\r\n};\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addWrapperClass);\n\n//# sourceURL=webpack://gulpl/./app/js/wrapperClassScript.js?')}},__webpack_module_cache__={};function __webpack_require__(n){var r=__webpack_module_cache__[n];if(void 0!==r)return r.exports;var e=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](e,e.exports,__webpack_require__),e.exports}__webpack_require__.d=(n,r)=>{for(var e in r)__webpack_require__.o(r,e)&&!__webpack_require__.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:r[e]})},__webpack_require__.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},__webpack_require__("./app/js/index.js"),__webpack_require__("./app/js/wrapperClassScript.js"),__webpack_require__("./app/js/mocks/cities.js"),__webpack_require__("./app/js/classes/App.js"),__webpack_require__("./app/js/classes/DashBoard.js"),__webpack_require__("./app/js/classes/LsManager.js"),__webpack_require__("./app/js/classes/Modal.js"),__webpack_require__("./app/js/classes/Settings.js"),__webpack_require__("./app/js/classes/Widget.js"),__webpack_require__("./app/js/modules/AppModule.js");var __webpack_exports__=__webpack_require__("./app/js/services/ModalService.js")})();